{"name":"FacebookChallenge","tagline":"","body":"\r\n\r\n#Facebook challenge of detecting bots in the online bidding environment\r\n\r\nThis repository documents the strategy, model and algorithm I used in Facebook challenge of detecting bots in the online bidding environment. The model I developed has an AUC score of 90.757% where the best AUC score reported in the leaderboard is about 94%.\r\n\r\n## Lessons learned\r\n\r\nFirst thing first, lessons learned from this competetion can be potentially useful. They are summerized as the following bullet list\r\n\r\n1. Support can be used as a baseline classifier. It is a stable classifier which is not very good for ensemble model.\r\n2. Random forest can be very useful in addition to SVM for the following reasons:\r\n   1. RF does not need feature normalization, centering, etc\r\n   2. RF does not have many parameter to tune\r\n   3. It is relatively fast to learn a RF than SVM\r\n   4. Off-the-shelf function in MATLAB\r\n3. Adding more feature will not always helpful\r\n\r\n## Final strategy\r\n\r\nThe following is about the final strategy I decided to use in the competetion. It could be better given more time.\r\n\r\n### Feature representation \r\n\r\n1. Features are extract from auction log including local features, global features, local per hour feature, _bag-of-words_ features\r\n2. Some of the features are not used in the learning algorithm, which can potentially improve the prediction performance of the model\r\n\r\n   1. Global features\r\n      1. Global feature are made by using all bids \r\n      2. Global features are listed in the following table\r\n      3. There is only one bit for bid feature, four bits for others\r\n      4. Feature number 8-14 are computed but are not used in this stage\r\n\r\n        |Feature Id|Feature Name|Feature Position|\r\n        |------:|----:|-----:|\r\n        |1 |bid              |1 |\r\n        |2 |auction          |3 |\r\n        |3 |merchandise      |4 |\r\n        |4 |device           |5 |\r\n        |5 |time             |6 |\r\n        |6 |country          |7 |\r\n        |7 |ip               |8 |\r\n        |8 |url              |9 |\r\n        |9 |minute           |10|\r\n        |10|hour             |11|\r\n        |11|day              |12|\r\n        |12|hourday          |13|\r\n        |13|interval         |14|\r\n        |14|average intercal |15|\r\n\r\n   2. Auction specific features\r\n      1. Auction specific features are extracted from bider-auction files\r\n      2. We use auctions which has more than 2 bids\r\n      3. Features are listed in the following table \r\n      4. Besides there being one position for the bid sum, there is one position for average of each individual\r\n\r\n        |Feature Id|Feature Name|Feature Position|\r\n        |------:|----:|-----:|\r\n        |1 |bid      |1|\r\n        |2 |device   |5|\r\n        |3 |country  |7|\r\n        |4 |ip       |8|\r\n        |5 |url      |9|\r\n        |6 |interval |14|\r\n\r\n   3. Per-hour features\r\n      1. Per-hour features include features listed in the following table:\r\n      2. Per-hour features are computed based on hours\r\n      3. There is one position for the average of the per hour features\r\n\r\n        |Feature Id|Feature Name|Feature Position|\r\n        |------:|----:|-----:|\r\n        |1 |bid              |1 |\r\n        |2 |auction          |3 |\r\n        |3 |merchandise      |4 |\r\n        |4 |device           |5 |\r\n        |5 |country          |7 |\r\n        |6 |ip               |8 |\r\n        |7 |url              |9 |\r\n\r\n   4. Per-minute features\r\n      1. Per-minute features include features listed in the following table:\r\n      2. Per-minute features are computed based on minute\r\n      3. There is one position for the average of the per minute features\r\n\r\n        |Feature Id|Feature Name|Feature Position|\r\n        |------:|----:|-----:|\r\n        |1 |bid              |1 |\r\n        |2 |auction          |3 |\r\n        |3 |merchandise      |4 |\r\n        |4 |device           |5 |\r\n        |5 |country          |7 |\r\n        |6 |ip               |8 |\r\n        |7 |url              |9 |\r\n\r\n   5. _bag-of-words_ features\r\n       1. Each bider is represented by the following _bag-of-words_ features\r\n       2. Most of them are not used in the current stage of the experiment due to the time limit\r\n       3. However, we consider auction/merchandise/device/country information as the only _bag-of-words_ features\r\n\r\n        |Feature Id|Feature Name|Feature Position|\r\n        |------:|----:|-----:|\r\n        |1 |auction          |3 |\r\n        |2 |merchandise      |4 |\r\n        |3 |device           |5 |\r\n        |4 |time             |6 |\r\n        |5 |country          |7 |\r\n        |6 |ip               |8 |\r\n        |7 |url              |9 |\r\n\r\n\r\n### Learning algorithm\r\n\r\n1. Support Vector Machine\r\n   1. Support Vector Machine (SVM) with probability output as baseline learner.\r\n   2. Feature representation of data is introduced in the last section.\r\n   3. We center the feature vector to have zero mean and unit variance such that points are located in a unit square.\r\n   4. Centering the featuer is done base on both training and testing data.\r\n   2. We use _Gaussian_ RBF kernel over the feature representation of the data points.\r\n   3. We use grid Search for the best parameter combination, e,g, margin slack parameter, _Gaussian_ width parameter.\r\n   4. Best model is then used for prediction.\r\n   5. We use the implementation of SVM from LibSVM toolbox\r\n   6. The basic MATLAB usage example is \r\n   \r\n                model = svmtrain(Ytr,Xtr,sprintf('-q -s 0 -c %.2f -t 2 -g %s -b 1',c,g));\r\n                [~,~,Yprobsvm] = svmpredict(Yts,Xts, model ,'-b 1'); \r\n                [~,~,~,AUC] = perfcurve(Yts,Yprobsvm,1);\r\n\r\n2. Random Forest \r\n   1. We use build-in function in MATLAB\r\n   2. We tune the parameter of the number of trees with 10 fold cross validation\r\n   3. The best model is then used for prediction\r\n   4. The basic MATLAB usage example is \r\n        model = TreeBagger(c,Xtr,Ytr, 'Method', 'classification');\r\n        [~,Yprobtree] = predict(model, Xts);\r\n   5. Be careful with the order of the probability outputs\r\n\r\n### Measure the performance\r\n\r\nWe use AUC score to measure the prediction performance of the models.\r\n\r\n### Experiments:\r\n\r\n1. SVM\r\n\r\n   1. global + auction + hour, duplicate 7 global feature, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8916|0.9950|||0.5|50   |\r\n   \r\n   1. auction + hour + minute, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8410|0.9325|||5|0.5   |\r\n   \r\n   1. global + auction + hour + minute, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8788|0.9898|||1|50   |\r\n   \r\n   1. global + auction + hour + minute, duplicate 7 global, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8895|0.9936|||0.01|50   |\r\n   \r\n   1. global + auction + hour + minute + _bag-of-words_ country, duplicate 7 global, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8819|0.9957|||5|50   |\r\n   \r\n   1. _bag-of-words_ country, 10 fold cv, tfidf\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.6934|0.8241|||1|0.001   |\r\n   \r\n   1. _bag-of-words_ country, 10 fold cv, centering\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.8484|0.9507|||0.5|0.5   |\r\n\r\n2. Random Forest\r\n   \r\n   1. Random forest, global + auction + hour + minute + _bag-of-words_ country, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|N|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.9220|0.9974|||125| \r\n   \r\n   1. Random forest, global + auction + hour + minute + _bag-of-words_ country/device, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|N|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|0.90757|0.9238|0.9978|||135| \r\n   \r\n   1. Random forest, global + auction + hour + minute + _bag-of-words_ auction/merchandise/country/device, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|N|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.9107|0.9980|||195| \r\n\r\n   1. Random forest, global + auction + hour + minute + _bag-of-words_ merchandise/country/device, 10 fold cv\r\n   \r\n      |Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|N|\r\n      |------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n      | |0608|      |0.9191|0.9981|||195| \r\n\r\n### Best model\r\n\r\nBest performance is achieved with model 2.2. In particular, it is a random forest learner with various hand made featuers.\r\n\r\n\r\n## History of coding and experiments\r\n\r\nThe following text documents the history of joining the competetion, including \r\n1. Different feature embedding strategy\r\n2. Coding\r\n3. Parameter selection methods\r\n4. Experimental results\r\n\r\n### Basic setting as baseline\r\n- Support Vector Machine (SVM) with probability output as baseline learner\r\n- Compose about 10 global values as feature representation of each bidder.\r\n- _Gaussian_ RBF kernel over the feature representation.\r\n- Grid Search for the best parameter, e,g, margin slack parameter, _Gaussian_ width parameter.\r\n- Best model is then used for prediction.\r\n- Prediction performance is shown in the following table\r\n\r\n|Methods|Time|Test AUC|Training best AUC|Training all AUC|\r\n|-----:|-----:|-----:|-----:|-----:|\r\n|Global|20150528|0.72485|0.75166|0.90494|\r\n|Global+Local|20150530|0.87348|0.8230|0.8861|\r\n|Global+Local(correct)|20150530|0.89848|0.8884|0.8983|\r\n|Global+Local(correct)+10|20150601|0.88199|0.8858|0.9200|\r\n|Global+Local(correct)+20|20150601|0.88186|0.8986|0.9198|\r\n|add new time feature|20150601|0.88900|0.9020|0.9253|\r\n\r\n###Time\r\n- 1 second = 52631578\r\n- min: 9631916842105263\r\n- max: 9772885210526316 \r\n- The data is for a period of 31 days.\r\n\r\n\r\n###Feature\r\n unique bid\r\n\r\n1. unique auction\r\n2. unique merchandise\r\n3. unique device\r\n4. unique time in second\r\n5. unique country\r\n6. unique ip\r\n7. unique url\r\n8. unique minute\r\n9. unqiue hour\r\n10. unique day\r\n11. unique hour-day\r\n12. unique interval \r\n13. unique intervalcount\r\n\r\n- Global features (1+13x4) \r\n  - How many unique XXX\r\n  - MIN, MAX, AVERAGE bids per unique XXX\r\n\r\n- Local features \r\n  - auction with more than 100 bidders \r\n\r\n\r\n- 1:12 (1-12)\r\n- 13:900\r\n\r\n- 1 (sum)\r\n- 12x4 (1-13/ time)\r\n- 3552\r\n\r\n\r\n\r\n###Log\r\n\r\n###History\r\n1. 1+7+7x4 features, SVM, 10 fold cv\r\n2. 1+7+7x4 features, SVM, 5 fold cv\r\n3. 1+7+7x4 features, SVM, 5 fold cv, 5 replicates\r\n4. 1+7+7x4 features, SVM, 10 fold cv, 10 replicates\r\n5. 1+11+11x4 features, SVM, 10 fold cv, 10 replicates\r\n6. 1+11+11x4 features, SVM, 5 fold cv, 5 replicates\r\n7. 1+11x4 features, SVM, 5 fold cv, 5 replicates \r\n8. 1+11x4 features, SVM, 10 fold cv, 10 replicates \r\n9. 1+13x4 features, SVM, 10 fold cv, 10 replicates \r\n10. 1+13x4 features, SVM, 5 fold cv, 5 replicates \r\n11. 1+13x4 features, SVM, 10 fold cv, 10 replicates, 0 feature -> 0 prediction \r\n12. 1+13x4 features, SVM, 10 fold cv, 10 replicates, voting over 10 replicates \r\n13. 1+13x4 features, SVM, 15 fold cv, 15 replicates, voting over 15 replicates \r\n14. 1+12x4 features (no hour-day), SVM, 15 fold cv, 15 replicates, voting over 15 replicates \r\n15. 1+11x4 features (no hour,hour-day), SVM, 15 fold cv, 15 replicates, voting over 15 replicates \r\n\r\n|ind|Time|Test AUC|Training best AUC|Training all AUC|SVM C|RBF G|\r\n|------:|----:|-----:|-----:|-----:|-----:|-----:|\r\n|1|20150601||0.8776|0.9600|10|0.1|\r\n|2|20150601||0.8729|0.9874|0.1|50|\r\n|3|20150601||0.8750|0.9181|0.05|0.01|\r\n|4|20150601||0.8808|0.9173|0.1|0.01|\r\n|5|20150601||0.8840|0.9212|0.05|0.01|\r\n|6|20150601||0.8873|0.9201|0.5|0.01|\r\n|7|20150601||0.8745|0.9257|0.05|100|\r\n|8|20150601||0.8743|0.9275|0.01|1|\r\n|9|20150602|0.84797|0.8827|0.9902|0.5|50|\r\n|10|20150602||0.8790|0.9845|0.1|50|\r\n|11|20150602|0.84797|0.8837|0.9902|0.5|50|\r\n|12|20150602|0.85515|0.9148||0.5|50|\r\n|13|20150602||0.9159||0.5|50|\r\n|14|20150603||0.9184||5|50|\r\n|15|20150603||0.9030||5|50|\r\n\r\n\r\n\r\n\r\n\r\n### Experimental settings with local featuers\r\n\r\n1. 1+12x4 global features + 10X2 averaged local features, auctions with > 100 bidders, 10 fold cv+replications, voting in single best fold, centering\r\n2. 1+12x4 global features + 10X2 averaged local features, auctions with > 100 bidders, 10 fold cv+replications, use all training data, centering\r\n3. 1+12x4 global features + 10X2 averaged local features, auctions with > 100 bidders, 10 fold cv, use all training data, centering\r\n4. 1+12x4 global features, auctions with > 100 bidders, 10 fold cv, use all training data, centering\r\n\r\n2. Nx10 local auction features, auctions with > 100 bidders, 10 fold cv+replications, centering\r\n\r\n\r\n|ind|Time|Test AUC|Training best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n|------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n|1|0604|0.83405|0.9160||10|6|50|0.5|\r\n|2|0604|0.83991|0.8919|0.9868|||10|0.5|\r\n|3|0604||0.9002|0.9868|||10|0.5|\r\n|4|0604|0.83685|0.9028|0.9912|||0.01|50|\r\n\r\n\r\n\r\n1. 1+13x4 global features (original x7, time x4, interval x2), 10 fold cv, use all training data, centering\r\n2. 1+13x4 global features (original x7, time x4, interval x2) + duplicate x1 global feature x13, 10 fold cv, use all training data, centering\r\n3. 1+13x4 global features (original x7, time x4, interval x2) + duplicate x2 global feature x13, 10 fold cv, use all training data, centering\r\n4. 1+13x4 global features (original x7, time x4, interval x2) + duplicate x1 global feature x13 + local, 10 fold cv, use all training data, centering\r\n   1. local features\r\n      1. local feature, which is extracted from bider-auction file\r\n      2. use auction with more than 5 bids\r\n      3. features include\r\n         1. bid\r\n         2. device\r\n         3. country\r\n         4. ip\r\n         5. url\r\n         6. interval\r\n      4. there is one bit for bid sum, one bit for averayge of each individual (this constraint is added and experimented as 5.)\r\n   2. global features\r\n      1. global feature are made by using all bids \r\n      2. global feature includes\r\n         1. bid \r\n         2. auction\r\n         3. device\r\n         4. country\r\n         5. time\r\n         6. ip\r\n         7. url\r\n         8. minute\r\n         9. hour\r\n         10. day\r\n         11. hour-day\r\n         12. interval\r\n         13. average interval\r\n      3. there is only one bit for bid feature, four bits for others\r\n5. As 4, only 4.4 changes\r\n6. As 5, 5 fold cv \r\n7. As 5, global feature without time, 5 fold cv \r\n8. As 5, global feature without hour-day and interval, 10 fold cv \r\n9. As 5, + local time features, 10 fold cv \r\n10. As 9, random seed is 0\r\n\r\n|Experiment|Time|Test AUC|CV best AUC|Training all AUC|K|k|SVM C|RBF G|\r\n|------:|----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\r\n|1 |0605|       |0.8987|0.9824|||0.01|50  |\r\n|2 |0605|       |0.9038|0.9406|||0.01|1   |\r\n|3 |0605|       |0.8996|0.9867|||0.05|50  | \r\n|4 |0605|0.85881|0.8959|0.9811|||0.1 |50  |\r\n|5 |0605|       |0.8962|0.9816|||0.1 |50  |\r\n|6 |0605|       |0.8922|0.9803|||0.5 |50  |\r\n|7 |0605|       |0.8727|0.9803|||0.01|0.01|\r\n|8 |0605|       |0.8900|0.9220|||0.05|0.01|\r\n|9 |0605|0.86097|0.8964|0.9851|||1   |50  |\r\n|10|0605|0.88444|0.8956|0.9445|||0.5 |1   |\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}